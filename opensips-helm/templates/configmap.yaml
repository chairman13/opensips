apiVersion: v1
kind: ConfigMap
metadata:
  name: opensips-config
  namespace: ims
data:
  opensips.cfg: |
    ####### Global Parameters #########

    log_level=3
    xlog_level=3
    stderror_enabled=yes
    syslog_enabled=no
    udp_workers=4

    socket=udp:0.0.0.0:5060

    # Set module path
    mpath="/usr/local/lib64/opensips/modules/"

    #### Modules ####

    loadmodule "signaling.so"
    loadmodule "sl.so"
    loadmodule "tm.so"
    modparam("tm", "fr_timeout", 5)
    modparam("tm", "fr_inv_timeout", 30)
    modparam("tm", "restart_fr_on_each_reply", 0)
    modparam("tm", "onreply_avp_mode", 1)

    loadmodule "rr.so"
    modparam("rr", "append_fromtag", 0)

    loadmodule "maxfwd.so"
    loadmodule "sipmsgops.so"
    loadmodule "proto_udp.so"
    loadmodule "usrloc.so"
    modparam("usrloc", "nat_bflag", "NAT")
    modparam("usrloc", "working_mode_preset", "single-instance-no-db")

    loadmodule "registrar.so"
    modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")

    loadmodule "acc.so"
    modparam("acc", "early_media", 0)
    modparam("acc", "report_cancels", 0)
    modparam("acc", "detect_direction", 0)

    ####### Routing Logic ########

    route {
        if (!mf_process_maxfwd_header(10)) {
            send_reply(483,"Too Many Hops");
            exit;
        }

        if (has_totag()) {
            if ( is_method("ACK") && t_check_trans() ) {
                t_relay();
                exit;
            }

            if ( !loose_route() ) {
                send_reply(404,"Not here");
                exit;
            }

            if (is_method("BYE")) {
                do_accounting("log","failed");
            }

            route(relay);
            exit;
        }

        if (is_method("CANCEL")) {
            if (t_check_trans())
                t_relay();
            exit;
        }

        t_check_trans();

        if (!(is_method("REGISTER"))) {
            if (!is_myself("$fd") && !is_myself("$rd")) {
                send_reply(403,"Relay Forbidden");
                exit;
            }
        }

        if (loose_route()) {
            xlog("L_ERR", "Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
            if (!is_method("ACK"))
                send_reply(403,"Preload Route denied");
            exit;
        }

        if (!is_method("REGISTER|MESSAGE"))
            record_route();

        if (is_method("INVITE")) {
            do_accounting("log");
        }

        if (!is_myself("$rd")) {
            append_hf("P-hint: outbound\r\n");
            route(relay);
        }

        if (is_method("PUBLISH|SUBSCRIBE")) {
            send_reply(503, "Service Unavailable");
            exit;
        }

        if (is_method("REGISTER")) {
            if (!save("location"))
                xlog("failed to register AoR $tu\n");
            exit;
        }

        if ($rU==NULL) {
            send_reply(484,"Address Incomplete");
            exit;
        }

        if (!lookup("location","method-filtering")) {
            t_reply(404, "Not Found");
            exit;
        }

        do_accounting("log","missed");
        route(relay);
    }

    route[relay] {
        if (is_method("INVITE")) {
            t_on_branch("per_branch_ops");
            t_on_reply("handle_nat");
            t_on_failure("missed_call");
        }

        if (!t_relay()) {
            send_reply(500,"Internal Error");
        }
        exit;
    }

    branch_route[per_branch_ops] {
        xlog("new branch at $ru\n");
    }

    onreply_route[handle_nat] {
        xlog("incoming reply\n");
    }

    failure_route[missed_call] {
        if (t_was_cancelled()) {
            exit;
        }
    }
